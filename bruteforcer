#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#Rafael Santos

import requests
import argparse
import threading
import os
import sys
import urllib3
import time
import queue
import platform

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

parser = argparse.ArgumentParser(description="Bruteforcer: Advanced Header Wordlist Bruteforce Tool.")
parser.add_argument("target", help="Will be your target, it can be a file containing the header, or an URL.")
parser.add_argument("wordlist", help="Wordlist path.")
parser.add_argument("-t", dest="threadsNumber", default=3, help="Number of threads to use.")
parser.add_argument("-f", dest="filter", default="404", help="Ignore listed code(s).")
parser.add_argument("-k", dest="Key", default="^", help="Key to replace: ^string_to_replace^.")
parser.add_argument("-lf", dest="lenghtFilter", default="", help="Ignore passed length responses.")
parser.add_argument("-r", dest="recursive", action="store_true", help="Use recursive mode.")
parser.add_argument("-rc", dest="recursiveCodes", default="all", help="Only release recursive wordlist to this codes.")
parser.add_argument("-rs", dest="recursiveSeparator", default="/", help="use an arbitrary character separator when using the recursive mode.")
parser.add_argument("-e", dest="wordlistExtension", default="", help="Add an extension to the passed wordlist. e.g: -e \".txt\".")
parser.add_argument("-proxy", dest="proxy", default="", help="Proxy the requests. Burp Proxy example: -proxy \"localhost:8080\".")
parser.add_argument("-sleep", dest="sleepAfter", default="0", help="Sleep after each request.")
parser.add_argument("-proto", dest="proto", default="https", help="Set protocol.")
parser.add_argument("-debug", dest="debug", action="store_true", help="Shows errors and debug menssages.")
args = parser.parse_args()

defaultKey = args.Key
filter = str(args.filter)
headerName = args.target
wordlistName = args.wordlist
numberOfThreads = int(args.threadsNumber)
lengthFilter = args.lenghtFilter
extension = args.wordlistExtension
fromProgressBar = "from_progress_bar"
sleepAfter = float(args.sleepAfter)
recursiveCodes = args.recursiveCodes
recursiveSeparator = args.recursiveSeparator
recursive = args.recursive
proxy = args.proxy
proto = args.proto
debug = args.debug

def checkArguments():
    if sleepAfter < 0:
        print("Invalid Sleeping time")
        exit(0)

    if sleepAfter != 0:
        ScanUtils.isSleeping = True

    if (numberOfThreads < 1) or (numberOfThreads > 1000):
        print("Invalid threads number, choose between 1 - 1000")
        exit(0)

    if proxy != "":
        finalProxy = {"https": proxy,
                      "http": proxy}

        ScanUtils.proxy = finalProxy

class ThreadSettings():
    stop = False
    messages = queue.Queue()

class ProgressBar():
    progress = 0
    requestsMade = 0
    pendingRequests = 0

class ScanUtils():
    wordlistLength = 0
    baseWordlist = []
    wordlist = []
    recursiveWordlist = []
    attackType = None
    isSleeping = False
    proxy = {}
    OS = ""
    session = requests.Session()

def checkProgressBar():
    ProgressBar.requestsMade += 1
    percent = int(round(100 / (float(ProgressBar.pendingRequests)/float(ProgressBar.requestsMade))))
    if percent > ProgressBar.progress:
        ProgressBar.progress += 1
        ThreadSettings.messages.put(fromProgressBar)

def readFile(name):
    try:
        file = open(name, "r", encoding="latin-1")
        data = file.readlines()
        file.close()

        return data
    except Exception as error:
        exception("readFile()" + str(error))
        exit(0)

def printProgressbar():
    progress = int(ProgressBar.progress/4.5)
    sys.stdout.flush()
    sys.stdout.write("[")
    sys.stdout.write(str(ProgressBar.progress) + "%")
    sys.stdout.write("]")
    sys.stdout.write("[")
    sys.stdout.write(str(ProgressBar.requestsMade) + "/" + str(ProgressBar.pendingRequests))
    sys.stdout.write("]")
    sys.stdout.write(" {")
    for i in range(0, progress):
        if "linux" in ScanUtils.OS:
            sys.stdout.write("\033[92m")
        sys.stdout.write("â–ˆ")
        if "linux" in ScanUtils.OS:
            sys.stdout.write("\033[0m")
    for i in range(progress, 21):
        sys.stdout.write(" ")
    sys.stdout.write("}\r")

def printReq():
    try:
        while True:
            if ThreadSettings.stop:
                exit(0)

            message = ThreadSettings.messages.get()
            if message == fromProgressBar:
                printProgressbar()
            elif message == "exit":
                exit(0)
            else:
                req = message.split("|")
                code = req[0]
                responseLength = req[1]
                word = req[2]

                if lengthFilter == responseLength:
                    sys.stdout.flush()
                    printProgressbar()
                elif code not in filter:
                    if (code in recursiveCodes) or (recursiveCodes == "all"):
                        for w in ScanUtils.baseWordlist:
                            ScanUtils.recursiveWordlist.append(word + recursiveSeparator + w)
                    if len(responseLength) >= 14:
                        pass
                    else:
                        aux = responseLength
                        for i in range(len(aux), 15):
                            responseLength += " "

                    if "linux" in ScanUtils.OS:
                        if str(code).startswith("3"):
                            print("=> \33[93m" + code + "\033[0m" + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        elif str(code).startswith("4"):
                            print("=> \33[91m" + code + "\033[0m" + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        elif str(code).startswith("2"):
                            print("=> \033[92m" + code + "\033[0m" + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        elif str(code).startswith("1"):
                            print("=> \033[94m" + code + "\033[0m" + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        else:
                            print("=> \33[91m" + code + "\033[0m" + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                    else:
                        if str(code).startswith("3"):
                            print("=> " + code + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        elif str(code).startswith("4"):
                            print("=> " + code + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        elif str(code).startswith("2"):
                            print("=> " + code + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        elif str(code).startswith("1"):
                            print("=> " + code + "   ::    Bytes:  " + responseLength + "  ::    " + word)
                        else:
                            print("=> " + code + "   ::    Bytes:  " + responseLength + "  ::    " + word)

                sys.stdout.flush()
                printProgressbar()
    except Exception as error:
        exception("printReq() " + str(error))

def preparePrinting(req, word):
    try:
        if req != None:
            code = str(req.status_code)
            length = str(len(req.text))

            messageToPrint = code + "|" + length + "|" + word

            ThreadSettings.messages.put(messageToPrint)
    except Exception as error:
        exception("preparePrinting() " + str(error))

def makeUrlRequest(url, word):
    try:
        req = requests.get(url, verify=False, allow_redirects=False, timeout=10, proxies=ScanUtils.proxy)
        preparePrinting(req, word)
        checkProgressBar()
        if ScanUtils.isSleeping:
            time.sleep(sleepAfter)
    except Exception as error:
        checkProgressBar()
    except KeyboardInterrupt:
        exit(0)

def makeHeaderRequest(url, header, body, method, word, hasBody):
    try:
        req = requests.Request(method.upper(), url, headers=header)
        prepped = req.prepare()

        if hasBody:
            prepped.body = body
            prepped.headers['Content-Length'] = calculateContentLength(body)

        res = ScanUtils.session.send(prepped, verify=False, proxies=ScanUtils.proxy, timeout=10, allow_redirects=False)

        preparePrinting(res, word)
        checkProgressBar()
        if ScanUtils.isSleeping:
            time.sleep(sleepAfter)
    except Exception as error:
        if debug:
            print(error)
        checkProgressBar()
    except KeyboardInterrupt:
        exit(0)

def replaceKey(line, keyToReplace):
    parts = line.split(defaultKey)
    aux = ""
    for i in range(0, len(parts)):
        if i%2 != 0:
           aux += keyToReplace
        else:
            aux += parts[i]

    return aux

def calculateContentLength(body):
    length = 0
    for char in body:
        if char == "\r":
            continue
        length += 1

    return length

def exception(menssage):
    menssage = str(menssage)
    print(menssage)
    exit(0)

def methodIsValid(method):
    try:
        methodList = ["GET", "POST", "HEAD", "PUT", "DELETE", "OPTIONS", "PATCH", "TRACE", "CONNECT"]
        method = method.upper()

        for mt in methodList:
            if mt == method:
                return True

        return False
    except Exception as error:
        exception("methodIsValid() " + str(error))

def alignHttpHeader(header):
    try:
        path = ""
        host = ""
        method = ""
        finalHeader = {}
        body = {}
        inBody = False
        auxBody = ""
        hasBody = False
        
        for i in range(0, len(header)):
            line = header[i]
            if i == 0:
                if (len(line) < 2):
                    exception("alignHttpHeader() Invalid Header")

                lineParts = line.split(" ")
                if len(lineParts) != 3:
                    exception("alignHttpHeader() Invalid header")

                method = lineParts[0]
                path = lineParts [1]

                if not methodIsValid(method):
                    exception("alignHttpHeader() Method: " + method + " is not implemented")

                continue

            if (line.replace("\n", "") == "") and (not inBody):
                inBody = True
                continue

            if not inBody:
                line = line.replace("\n", "")
                headerParts = line.split(": ")
                if len(headerParts) != 2:
                    if len(headerParts) == 1:
                        headerParts.append("")
                    else:
                        aux = ""
                        for i in range(1, len(headerParts)-1):
                            aux += headerParts[i]
                            headerParts.remove(headerParts[i])
                        headerParts.append(aux)

                if "Host" == headerParts[0]:
                    host = headerParts[1]

                finalHeader.update({headerParts[0]:headerParts[1]})

            else:
                auxBody += line

        if len(auxBody.replace(" ", "")) != 0:
            hasBody = True
            body = auxBody

        return finalHeader, body, method, path, host, hasBody
    except Exception as error:
        exception("alignHttpHeader() " + str(error))

def changeRequestToPassedWordlist(header, body, path, host, word, hasBody):
    try:
        finalHeader = {}
        finalBody = ""

        for key, value in header.items():
            finalHeader.update({replaceKey(key, word): replaceKey(value, word)})

        if hasBody:
            finalBody = replaceKey(body, word)

        finalHost = replaceKey(host, word)
        finalPath = replaceKey(path, word)

        return finalHeader, finalBody, finalHost, finalPath
    except Exception as error:
        exception("alignRequest() " + str(error))

def prepareAndMakeRequest(header, body, host, path, method, wolrd, hasBody):
    try:
        url =  proto + "://" + host + path

        makeHeaderRequest(url, header, body, method, wolrd, hasBody)
    except Exception as error:
        exception("prepareAndMakeRequest() " + str(error))

def headerAttack(ini, end):
    try:
        for i in range(ini, end):
            if ThreadSettings.stop:
                break
            word = ScanUtils.wordlist[i]
            header = readFile(headerName)
            alignedHeader, body, method, path, host, hasBody = alignHttpHeader(header)
            finalHeader, finalBody, finalHost, finalPath = changeRequestToPassedWordlist(alignedHeader, body, path, host, word, hasBody)
            prepareAndMakeRequest(finalHeader, finalBody, finalHost, finalPath, method, word, hasBody)

    except Exception as error:
        exception("headerAttack() " + str(error))

def urlattack(ini, end):
    try:
        for i in range(ini, end):
            if ThreadSettings.stop:
                break
            word = ScanUtils.wordlist[i]
            url = replaceKey(headerName, word)
            makeUrlRequest(url, word)
    except Exception as error:
        exception("urlAttack() " + str(error))

def runThreads():
    try:
        threads = []
        dWordlist = int(ScanUtils.wordlistLength/numberOfThreads)
        ini = 0
        end = dWordlist

        printReqThread = threading.Thread(target=printReq)
        printReqThread.start()

        if numberOfThreads == 1:
            thread = threading.Thread(target=ScanUtils.attackType, args=[0, ScanUtils.wordlistLength])
            threads.append(thread)

        else:
            threadToRun = threading.Thread(target=ScanUtils.attackType, args=[ini, end])
            threads.append(threadToRun)

            for i in range(0, numberOfThreads-1):
                ini = ini + dWordlist
                end = end + dWordlist

                threadToRun = threading.Thread(target=ScanUtils.attackType, args=[ini, end])
                threads.append(threadToRun)

            if end < ScanUtils.wordlistLength:
                finalThreadToRun = threading.Thread(target=ScanUtils.attackType, args=[end, ScanUtils.wordlistLength])
                threads.append(finalThreadToRun)

        for thread in threads:
            thread.start()

        try:
            while True:
                time.sleep(2)
                if str(threading.active_count()) == "2":
                    ThreadSettings.messages.put("exit")
                    if recursive and (len(ScanUtils.recursiveWordlist) > 0):
                        ScanUtils.wordlist = ScanUtils.recursiveWordlist
                        ProgressBar.pendingRequests += len(ScanUtils.recursiveWordlist)
                        ProgressBar.progress = 0
                        ScanUtils.recursiveWordlist = []
                        ScanUtils.wordlistLength = len(ScanUtils.wordlist)

                        while True:
                            if str(threading.active_count()) == "1":
                                break
                            time.sleep(1)

                        runThreads()
                    else:
                        exit(0)
        except KeyboardInterrupt:
            print("\n[*] Stopping threads ...")
            ThreadSettings.stop = True
            ThreadSettings.messages.put("exit")
            exit(0)
    except Exception as error:
        exception("runThreads() " + str(error))

def getUrl():
    data = readFile(headerName)
    path = data[0].split(" ")[1]
    for line in data:
        line = line.replace("\n", "")
        if "Host: " in line:
            parts = line.split(": ")
            if len(parts) != 1:
                url  = parts[1] + path
                if "." not in url:
                    exception("Main() Invalid target")
                return url

    return ""

def checkOS():
    os = platform.system()
    ScanUtils.OS = os.lower()

def generateBaseWordlist():
    try:
        wordlist = []
        data = readFile(wordlistName)

        for line in data:
            wordlist.append(line.replace("\n", "") + extension)

        ScanUtils.wordlist = wordlist
        ScanUtils.baseWordlist = wordlist
        ScanUtils.wordlistLength = len(wordlist)
        ProgressBar.pendingRequests = ScanUtils.wordlistLength
    except Exception as error:
        exception("generateBaseWordlist() " + str(error))

def main():
    try:
        checkOS()

        label = '''
      :::::::::  :::::::::  :::    ::: ::::::::::: :::::::::: :::::::::: ::::::::  :::::::::   ::::::::  :::::::::: ::::::::: 
     :+:    :+: :+:    :+: :+:    :+:     :+:     :+:        :+:       :+:    :+: :+:    :+: :+:    :+: :+:        :+:    :+: 
    +:+    +:+ +:+    +:+ +:+    +:+     +:+     +:+        +:+       +:+    +:+ +:+    +:+ +:+        +:+        +:+    +:+  
   +#++:++#+  +#++:++#:  +#+    +:+     +#+     +#++:++#   :#::+::#  +#+    +:+ +#++:++#:  +#+        +#++:++#   +#++:++#:    
  +#+    +#+ +#+    +#+ +#+    +#+     +#+     +#+        +#+       +#+    +#+ +#+    +#+ +#+        +#+        +#+    +#+    
 #+#    #+# #+#    #+# #+#    #+#     #+#     #+#        #+#       #+#    #+# #+#    #+# #+#    #+# #+#        #+#    #+#     
#########  ###    ###  ########      ###     ########## ###        ########  ###    ###  ########  ########## ###    ### '''

        if "linux" in ScanUtils.OS:
            label = "\033[92m" + label + "\033[0m"

        print(label + "\n\n")

        checkArguments()
        generateBaseWordlist()
        requestPerLoop = ScanUtils.wordlistLength/numberOfThreads

        print("[*] WordList length: " + str(ScanUtils.wordlistLength))
        print("[*] Threads: " + str(numberOfThreads))
        print("[*] Filter set to do not print [" + str(filter) + "] codes")
        print("[*] Requests per thread: " + str(int(requestPerLoop)))
        if recursive:
            print("[*] Will recursively scan: [" + recursiveCodes + "] codes")

        if os.path.isfile(headerName):
            url = getUrl()
            print("[*] Target: " + proto + "://" + url)
            print("[*] Starting header attack\n")
            ScanUtils.attackType = headerAttack
        else:
            print("[*] Target: " + headerName)
            print("[*] Starting url attack\n")
            ScanUtils.attackType = urlattack

        runThreads()
    except Exception as error:
        exception("main() " + str(error))

main()
